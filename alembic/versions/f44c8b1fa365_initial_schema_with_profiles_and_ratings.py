"""Initial schema with profiles and ratings

Revision ID: f44c8b1fa365
Revises: 
Create Date: 2025-08-17 19:07:57.617180

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f44c8b1fa365'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('graphhopper_custom_profiles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('discipline', sa.Enum('ROAD', 'GRAVEL', 'MTB', 'TREKKING', 'COMMUTE', name='disciplinetype'), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('template', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('template_hash', sa.String(length=64), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('discipline', 'version', name='unique_discipline_version')
    )
    op.create_index('idx_active_profiles', 'graphhopper_custom_profiles', ['discipline', 'is_active'], unique=False)
    op.create_table('osm_ways',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('osm_id', sa.String(length=50), nullable=False),
    sa.Column('geometry_wkt', sa.Text(), nullable=False),
    sa.Column('surface', sa.String(length=50), nullable=True),
    sa.Column('smoothness', sa.String(length=50), nullable=True),
    sa.Column('highway_class', sa.String(length=50), nullable=True),
    sa.Column('track_type', sa.String(length=10), nullable=True),
    sa.Column('length_meters', sa.Float(), nullable=True),
    sa.Column('elevation_gain', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('osm_id')
    )
    op.create_index('idx_osm_way_id', 'osm_ways', ['osm_id'], unique=False)
    op.create_table('precomputed_routes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('discipline', sa.Enum('ROAD', 'GRAVEL', 'MTB', 'TREKKING', 'COMMUTE', name='disciplinetype'), nullable=False),
    sa.Column('geometry_wkt', sa.Text(), nullable=False),
    sa.Column('start_point', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('end_point', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('center_lat', sa.Float(), nullable=False),
    sa.Column('center_lon', sa.Float(), nullable=False),
    sa.Column('distance_meters', sa.Float(), nullable=False),
    sa.Column('elevation_gain', sa.Float(), nullable=True),
    sa.Column('difficulty_rating', sa.Integer(), nullable=True),
    sa.Column('usage_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_precomputed_discipline', 'precomputed_routes', ['discipline'], unique=False)
    op.create_index('idx_precomputed_location', 'precomputed_routes', ['center_lat', 'center_lon'], unique=False)
    op.create_table('saved_routes',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('geometry_wkt', sa.Text(), nullable=False),
    sa.Column('start_point', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('end_point', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('distance_meters', sa.Float(), nullable=False),
    sa.Column('elevation_gain', sa.Float(), nullable=True),
    sa.Column('estimated_time_seconds', sa.Integer(), nullable=True),
    sa.Column('discipline', sa.Enum('ROAD', 'GRAVEL', 'MTB', 'TREKKING', 'COMMUTE', name='disciplinetype'), nullable=True),
    sa.Column('profile_settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_saved_routes_user', 'saved_routes', ['user_id'], unique=False)
    op.create_table('profile_priors',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('profile_id', sa.Integer(), nullable=False),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('training_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['profile_id'], ['graphhopper_custom_profiles.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('profile_id', 'version', name='unique_profile_prior_version')
    )
    op.create_table('user_profiles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('profile_id', sa.Integer(), nullable=False),
    sa.Column('custom_name', sa.String(length=255), nullable=True),
    sa.Column('last_parameter_update', sa.DateTime(timezone=True), nullable=True),
    sa.Column('total_ratings', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['profile_id'], ['graphhopper_custom_profiles.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'profile_id', name='unique_user_profile')
    )
    op.create_index('idx_user_profiles_user', 'user_profiles', ['user_id'], unique=False)
    op.create_table('learned_parameters',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_profile_id', sa.UUID(), nullable=False),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('is_prior', sa.Boolean(), nullable=False),
    sa.Column('rating_count_at_generation', sa.Integer(), nullable=True),
    sa.Column('convergence_metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('computation_time_ms', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_profile_id'], ['user_profiles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_learned_params_created', 'learned_parameters', ['user_profile_id', 'created_at'], unique=False)
    op.create_index('idx_learned_params_profile', 'learned_parameters', ['user_profile_id'], unique=False)
    op.create_table('parameter_update_requests',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_profile_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', name='requeststatus'), nullable=False),
    sa.Column('requested_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=True),
    sa.Column('learned_parameters_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['user_profile_id'], ['user_profiles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_update_requests_status', 'parameter_update_requests', ['status'], unique=False)
    op.create_index('idx_update_requests_user', 'parameter_update_requests', ['user_profile_id'], unique=False)
    op.create_table('segment_ratings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_profile_id', sa.UUID(), nullable=False),
    sa.Column('osm_way_id', sa.Integer(), nullable=False),
    sa.Column('weight', sa.Float(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('conditions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.CheckConstraint('weight > 0 AND weight <= 100', name='valid_weight_range'),
    sa.ForeignKeyConstraint(['osm_way_id'], ['osm_ways.id'], ),
    sa.ForeignKeyConstraint(['user_profile_id'], ['user_profiles.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_profile_id', 'osm_way_id', name='unique_user_way_rating')
    )
    op.create_index('idx_ratings_user_profile', 'segment_ratings', ['user_profile_id'], unique=False)
    op.create_index('idx_ratings_way', 'segment_ratings', ['osm_way_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_ratings_way', table_name='segment_ratings')
    op.drop_index('idx_ratings_user_profile', table_name='segment_ratings')
    op.drop_table('segment_ratings')
    op.drop_index('idx_update_requests_user', table_name='parameter_update_requests')
    op.drop_index('idx_update_requests_status', table_name='parameter_update_requests')
    op.drop_table('parameter_update_requests')
    op.drop_index('idx_learned_params_profile', table_name='learned_parameters')
    op.drop_index('idx_learned_params_created', table_name='learned_parameters')
    op.drop_table('learned_parameters')
    op.drop_index('idx_user_profiles_user', table_name='user_profiles')
    op.drop_table('user_profiles')
    op.drop_table('profile_priors')
    op.drop_index('idx_saved_routes_user', table_name='saved_routes')
    op.drop_table('saved_routes')
    op.drop_index('idx_precomputed_location', table_name='precomputed_routes')
    op.drop_index('idx_precomputed_discipline', table_name='precomputed_routes')
    op.drop_table('precomputed_routes')
    op.drop_index('idx_osm_way_id', table_name='osm_ways')
    op.drop_table('osm_ways')
    op.drop_index('idx_active_profiles', table_name='graphhopper_custom_profiles')
    op.drop_table('graphhopper_custom_profiles')
    # ### end Alembic commands ###
